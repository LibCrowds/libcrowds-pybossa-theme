{"version":3,"sources":["active-users.js"],"names":["gapi","analytics","ready","createComponent","initialize","this","activeUsers","execute","polling_","stop","render_","auth","isAuthorized","getActiveUsers_","once","bind","clearTimeout","timeout_","emit","opts","get","container","document","getElementById","innerHTML","template","querySelector","options","pollingInterval","isNaN","Error","client","data","realtime","ids","metrics","response","newValue","totalResults","rows","oldValue","onChange_","setTimeout","delta","valueContainer"],"mappings":"AAiBAA,KAAAC,UAAAC,MAAA,WAEAF,KAAAC,UAAAE,gBAAA,eAEAC,WAAA,WACAC,KAAAC,YAAA,GAGAC,QAAA,WAEAF,KAAAG,UACAH,KAAAI,OAGAJ,KAAAK,UAGAV,KAAAC,UAAAU,KAAAC,eACAP,KAAAQ,kBAGAb,KAAAC,UAAAU,KAAAG,KAAA,UAAAT,KAAAQ,gBAAAE,KAAAV,QAIAI,KAAA,WACAO,aAAAX,KAAAY,UACAZ,KAAAG,UAAA,EACAH,KAAAa,KAAA,QAAAZ,YAAAD,KAAAC,eAGAI,QAAA,WACA,GAAAS,GAAAd,KAAAe,KAGAf,MAAAgB,UAAA,gBAAAF,GAAAE,UACAC,SAAAC,eAAAJ,EAAAE,WAAAF,EAAAE,UAEAhB,KAAAgB,UAAAG,UAAAL,EAAAM,UAAApB,KAAAoB,SACApB,KAAAgB,UAAAK,cAAA,KAAAF,UAAAnB,KAAAC,aAGAO,gBAAA,WACA,GAAAc,GAAAtB,KAAAe,MACAQ,EAAA,KAAAD,EAAAC,iBAAA,EAEA,IAAAC,MAAAD,IAAA,IAAAA,EACA,KAAA,IAAAE,OAAA,uCAGAzB,MAAAG,UAAA,EACAR,KAAA+B,OAAA9B,UAAA+B,KAAAC,SACAb,KAAAc,IAAAP,EAAAO,IAAAC,QAAA,mBACA5B,QAAA,SAAA6B,GAEA,GAAAC,GAAAD,EAAAE,cAAAF,EAAAG,KAAA,GAAA,GAAA,EACAC,EAAAnC,KAAAC,WAEAD,MAAAa,KAAA,WAAAZ,YAAAD,KAAAC,cAEA+B,GAAAG,IACAnC,KAAAC,YAAA+B,EACAhC,KAAAoC,UAAAJ,EAAAG,KAGAnC,KAAAG,UAAA,KACAH,KAAAY,SAAAyB,WAAArC,KAAAQ,gBAAAE,KAAAV,MACAuB,KAEAb,KAAAV,QAGAoC,UAAA,SAAAE,GACA,GAAAC,GAAAvC,KAAAgB,UAAAK,cAAA,IACAkB,KAAAA,EAAApB,UAAAnB,KAAAC,aAEAD,KAAAa,KAAA,UAAAZ,YAAAD,KAAAC,YAAAqC,MAAAA,IACAA,EAAA,EACAtC,KAAAa,KAAA,YAAAZ,YAAAD,KAAAC,YAAAqC,MAAAA,IAGAtC,KAAAa,KAAA,YAAAZ,YAAAD,KAAAC,YAAAqC,MAAAA,KAIAlB,SACA","file":"active-users.js","sourcesContent":["// Copyright 2014 Google Inc. All rights reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n\n/* global gapi */\n\ngapi.analytics.ready(function() {\n\n  gapi.analytics.createComponent('ActiveUsers', {\n\n    initialize: function() {\n      this.activeUsers = 0;\n    },\n\n    execute: function() {\n      // Stop any polling currently going on.\n      if (this.polling_) {\n        this.stop();\n      }\n\n      this.render_();\n\n      // Wait until the user is authorized.\n      if (gapi.analytics.auth.isAuthorized()) {\n        this.getActiveUsers_();\n      }\n      else {\n        gapi.analytics.auth.once('success', this.getActiveUsers_.bind(this));\n      }\n    },\n\n    stop: function() {\n      clearTimeout(this.timeout_);\n      this.polling_ = false;\n      this.emit('stop', {activeUsers: this.activeUsers});\n    },\n\n    render_: function() {\n      var opts = this.get();\n\n      // Render the component inside the container.\n      this.container = typeof opts.container == 'string' ?\n          document.getElementById(opts.container) : opts.container;\n\n      this.container.innerHTML = opts.template || this.template;\n      this.container.querySelector('b').innerHTML = this.activeUsers;\n    },\n\n    getActiveUsers_: function() {\n      var options = this.get();\n      var pollingInterval = (options.pollingInterval || 5) * 1000;\n\n      if (isNaN(pollingInterval) || pollingInterval < 5000) {\n        throw new Error('Frequency must be 5 seconds or more.');\n      }\n\n      this.polling_ = true;\n      gapi.client.analytics.data.realtime\n        .get({ids:options.ids, metrics:'rt:activeUsers'})\n        .execute(function(response) {\n\n          var newValue = response.totalResults ? +response.rows[0][0] : 0;\n          var oldValue = this.activeUsers;\n\n          this.emit('success', {activeUsers: this.activeUsers});\n\n          if (newValue != oldValue) {\n            this.activeUsers = newValue;\n            this.onChange_(newValue - oldValue);\n          }\n\n          if (this.polling_ = true) {\n            this.timeout_ = setTimeout(this.getActiveUsers_.bind(this),\n                pollingInterval);\n          }\n        }.bind(this));\n    },\n\n    onChange_: function(delta) {\n      var valueContainer = this.container.querySelector('b');\n      if (valueContainer) valueContainer.innerHTML = this.activeUsers;\n\n      this.emit('change', {activeUsers: this.activeUsers, delta: delta});\n      if (delta > 0) {\n        this.emit('increase', {activeUsers: this.activeUsers, delta: delta});\n      }\n      else {\n        this.emit('decrease', {activeUsers: this.activeUsers, delta: delta});\n      }\n    },\n\n    template:\n      '<div class=\"ActiveUsers\">' +\n        'Active Users: <b class=\"ActiveUsers-value\"></b>' +\n      '</div>'\n\n  });\n\n});\n\n"],"sourceRoot":"/source/"}